#!/bin/sh
# SPDX-License-Identifier: GPL-3.0-or-later

. /lib/functions/system.sh
. /lib/functions/fff/network

setupPorts() {
    # Add a single port to the *_PORTS config
    # Usage: setupPorts <port id> <port mode>

    local port=$1
    local mode=$2

    #default: BATMAN
    if [ "$mode" = "WAN" ] ; then
        WAN_PORTS="${WAN_PORTS} $port"
    elif [ "$mode" = "CLIENT" ] ; then
        CLIENT_PORTS="${CLIENT_PORTS} $port"
    else
        BATMAN_PORTS="${BATMAN_PORTS} $port"
    fi
}

BOARD="$(uci get board.model.name)"
. /etc/network.$BOARD
[ -n "$ROUTERMAC" ] || ROUTERMAC=$(get_mac_label)

if [ -s /etc/network.config ] ; then
    . /etc/network.config
else
    # Write network.config
    echo "CLIENT_PORTS='$CLIENT_PORTS'" > /etc/network.config
    echo "BATMAN_PORTS='$BATMAN_PORTS'" >> /etc/network.config
    if [ -n "$WAN_PORTS" ] ; then
        echo "WAN_PORTS='$WAN_PORTS'" >> /etc/network.config
    fi
    if [ "$ONE_PORT" = "YES" ] || [ -n "$ETHPORT" ] ; then
        echo "ETHMODE='$ETHMODE' # use BATMAN, CLIENT or WAN" >> /etc/network.config
    fi
    if [ -n "$LAN0PORT" ] ; then
        echo "LAN0MODE='$LAN0MODE' # use BATMAN, CLIENT or WAN" >> /etc/network.config
    fi
    if [ -n "$LAN1PORT" ] ; then
        echo "LAN1MODE='$LAN1MODE' # use BATMAN, CLIENT or WAN" >> /etc/network.config
    fi
    echo "FORCEPARSE='0' # Parse at: 0=first boot only, 1=every reboot, 2=next reboot (once)" >> /etc/network.config
fi

if [ "$FORCEPARSE" = '2' ] ; then
    sed -i '/^FORCEPARSE/d' /etc/network.config
    echo "FORCEPARSE='0' # Parse at: 0=first boot only, 1=every reboot, 2=next reboot (once)" >> /etc/network.config
    FORCEPARSE='1'
fi

if [ -n "$ETHPORT" ] ; then
    #LAN@AR150: default: BATMAN
    setupPorts "$ETHPORT" "${ETHMODE}"
fi
if [ -n "$LAN0PORT" ] ; then
    #LAN0@two-port: default: BATMAN
    setupPorts "$LAN0PORT" "${LAN0MODE}"
fi
if [ -n "$LAN1PORT" ] ; then
    #LAN1@two-port: default: BATMAN
    setupPorts "$LAN1PORT" "${LAN1MODE}"
fi

if ! uci -q get network.$SWITCHDEV > /dev/null || [ "$FORCEPARSE" = '1' ] ; then

    SWITCHHW=$(swconfig list | awk '{ print $4 }')

    uci set network.$SWITCHDEV=switch
    uci set network.$SWITCHDEV.name=$SWITCHHW
    uci set network.$SWITCHDEV.enable=1
    uci set network.$SWITCHDEV.reset=1
    uci set network.$SWITCHDEV.enable_vlan=1

    uci set network.${SWITCHDEV}_1=switch_vlan
    uci set network.${SWITCHDEV}_1.device=$SWITCHHW
    uci set network.${SWITCHDEV}_1.vlan=1
    uci set network.${SWITCHDEV}_1.ports="$CLIENT_PORTS"

    if [ "$WANDEV" = "$SWITCHDEV" ] || ! [ -z "$WAN_PORTS" ]; then
        uci set network.${SWITCHDEV}_2=switch_vlan
        uci set network.${SWITCHDEV}_2.device=$SWITCHHW
        uci set network.${SWITCHDEV}_2.vlan=2
        uci set network.${SWITCHDEV}_2.ports="$WAN_PORTS"
    fi

    uci set network.${SWITCHDEV}_3=switch_vlan
    uci set network.${SWITCHDEV}_3.device=$SWITCHHW
    uci set network.${SWITCHDEV}_3.vlan=3
    uci set network.${SWITCHDEV}_3.ports="$BATMAN_PORTS"

    uci set network.client.ifname="$SWITCHDEV.1 bat0"

    uci set network.ethmesh.ifname="$SWITCHDEV.3"

    if [ "$WANDEV" = "$SWITCHDEV" ]; then
        uci set network.wan.ifname=$WANDEV.2
    else
        uci set network.wan.ifname=$WANDEV
    fi

    uci commit network
fi

if [ "$ONE_PORT" = "YES" ] && ( ! uci -q get network.$SWITCHDEV.ifname || [ "$FORCEPARSE" = '1' ] ) ; then
    uci set network.$SWITCHDEV=interface
    uci set network.$SWITCHDEV.ifname=$SWITCHDEV
    if [ "$ETHMODE" = "WAN" ]; then
        uci set network.client.ifname="bat0"
        uci set network.wan.ifname="$WANDEV"
        uci del network.ethmesh.ifname
        uci del network.${SWITCHDEV}.macaddr
    elif [ "$ETHMODE" = "CLIENT" ] ; then
        uci set network.client.ifname="bat0 $SWITCHDEV"
        uci set network.wan.ifname="eth2" #eth2 because it is default in config file
        uci del network.ethmesh.ifname
        uci del network.${SWITCHDEV}.macaddr
    elif [ "$ETHMODE" = "BATMAN" ] ; then
        uci set network.client.ifname="bat0"
        uci set network.wan.ifname="eth2" #eth2 because it is default in config file
        uci set network.ethmesh.ifname="$SWITCHDEV"
        ETH0MAC="w2ap"
    fi
    uci commit network
fi

/etc/init.d/network restart

if [ -n "$ETHMESHMAC" ]; then
    if uci get network.ethmesh.macaddr
    then
        echo "MAC for ethmesh is set already"
    else
        echo "Fixing MAC on $SWITCHDEV.3 (ethmesh)"
        sleep 10

        uci set network.ethmesh.macaddr=$ETHMESHMAC
        uci commit network

        ifconfig $SWITCHDEV.3 down
        ifconfig $SWITCHDEV.3 hw ether $ETHMESHMAC
        ifconfig $SWITCHDEV.3 up
        /etc/init.d/network restart
    fi
fi

if [ -n "$ROUTERMAC" ]; then
    if uci get network.client.macaddr
    then
        echo "MAC for client is set already"
    else
        echo "Fixing MAC on br-client"
        sleep 10

        uci set network.client.macaddr=$ROUTERMAC
        uci commit network

        ifconfig br-client down
        ifconfig br-client hw ether $ROUTERMAC
        ifconfig br-client up
        /etc/init.d/network restart
    fi
fi

if [ -n "$ETH0MAC" ]; then
        echo "Fixing MAC on $SWITCHDEV"
        sleep 10
        NEW_MACADDR=$(cat "/sys/class/net/${ETH0MAC}/address")
        uci set network.${SWITCHDEV}.macaddr=$NEW_MACADDR
        uci commit network
        ifconfig $SWITCHDEV down
        ifconfig $SWITCHDEV hw ether $NEW_MACADDR
        ifconfig $SWITCHDEV up
        /etc/init.d/network restart
fi

if uci -q get "network.client.ip6addr" > /dev/null
then
    echo "IPv6 for client is set already"
else
    echo "Setting IPv6 addresses"
    # Some time needed :(
    sleep 5

    for ip in $(ip -6 addr show br-client | awk '/fdff/{ print $2 }'); do
        ip -6 addr del $ip dev br-client
    done

    prefix="fdff::/64"
    # Set $prefix::MAC as IP
    addr=$(owipcalc "$prefix" add "::$(ipMacSuffix "$ROUTERMAC")")
    ip -6 addr add $addr dev br-client

    uci -q del network.globals
    uci -q set network.globals=globals
    uci -q set network.globals.ula_prefix=$prefix
    uci -q add_list network.client.ip6addr=$addr
    uci -q set network.client.proto=static

    # Set $prefix::1 as IP
    addr=$(owipcalc "$prefix" add ::1)
    ip -6 addr add $addr dev br-client
    uci -q add_list network.client.ip6addr=$addr

    # Set $prefix::link-local as IP
    addr=$(owipcalc "$prefix" add "::$(ipEUISuffix "$ROUTERMAC")")
    ip -6 addr add $addr dev br-client
    uci -q add_list network.client.ip6addr=$addr

    uci -q commit network

    [ -s /etc/init.d/fff-uradvd ] && /etc/init.d/fff-uradvd restart
fi
